{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n/* eslint-disable react/no-unused-prop-types */\n\n\nvar GOOGLE_PAY_BUTTON_SDK_URL = 'https://pay.google.com/gp/p/js/pay.js';\n\nvar GPayButton = function (_PureComponent) {\n  inherits(GPayButton, _PureComponent);\n\n  function GPayButton() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, GPayButton);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GPayButton.__proto__ || Object.getPrototypeOf(GPayButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      paymentsClientInitialised: false,\n      paymentsClient: undefined\n    }, _this.loadSDK = function () {\n      var script = document.createElement('script');\n      script.src = GOOGLE_PAY_BUTTON_SDK_URL;\n      script.onload = _this.setPaymentsClient;\n      script.async = true;\n      script.defer = true;\n      document.body.appendChild(script);\n    }, _this.setPaymentsClient = function () {\n      var _this$props = _this.props,\n          development = _this$props.development,\n          onPaymentAuthorized = _this$props.onPaymentAuthorized,\n          onPaymentDataChanged = _this$props.onPaymentDataChanged;\n      var options = {\n        environment: development ? 'TEST' : 'PRODUCTION'\n      };\n\n      if (typeof onPaymentAuthorized === 'function') {\n        options = _extends({}, options, {\n          paymentDataCallbacks: {\n            onPaymentAuthorized: onPaymentAuthorized\n          }\n        });\n      }\n\n      if (typeof onPaymentDataChanged === 'function') {\n        options = _extends({}, options, {\n          paymentDataCallbacks: _extends({}, options.paymentDataCallbacks, {\n            onPaymentDataChanged: onPaymentDataChanged\n          })\n        });\n      }\n\n      _this.setState({\n        paymentsClientInitialised: true,\n        paymentsClient: new window.google.payments.api.PaymentsClient(options)\n      });\n    }, _this.payButtonClickListener = function () {\n      var _this$props2 = _this.props,\n          currencyCode = _this$props2.currencyCode,\n          countryCode = _this$props2.countryCode,\n          totalPriceStatus = _this$props2.totalPriceStatus,\n          totalPrice = _this$props2.totalPrice,\n          displayItems = _this$props2.displayItems,\n          totalPriceLabel = _this$props2.totalPriceLabel,\n          checkoutOption = _this$props2.checkoutOption,\n          merchantInfo = _this$props2.merchantInfo,\n          apiVersion = _this$props2.apiVersion,\n          apiVersionMinor = _this$props2.apiVersionMinor,\n          allowedPaymentMethods = _this$props2.allowedPaymentMethods,\n          onLoadPaymentData = _this$props2.onLoadPaymentData,\n          onPaymentAuthorized = _this$props2.onPaymentAuthorized,\n          onPaymentDataChanged = _this$props2.onPaymentDataChanged,\n          onUserCanceled = _this$props2.onUserCanceled;\n      var paymentDataRequest = {\n        apiVersion: apiVersion,\n        apiVersionMinor: apiVersionMinor,\n        allowedPaymentMethods: allowedPaymentMethods,\n        transactionInfo: {\n          currencyCode: currencyCode,\n          countryCode: countryCode,\n          totalPriceStatus: totalPriceStatus,\n          totalPrice: totalPrice,\n          displayItems: displayItems,\n          totalPriceLabel: totalPriceLabel,\n          checkoutOption: checkoutOption\n        },\n        merchantInfo: merchantInfo\n      };\n      var callbackIntents = [];\n\n      if (typeof onPaymentAuthorized === 'function') {\n        callbackIntents.push('PAYMENT_AUTHORIZATION');\n      }\n\n      if (typeof onPaymentDataChanged === 'function') {\n        callbackIntents.push('SHIPPING_ADDRESS', 'SHIPPING_OPTION');\n      }\n\n      if (callbackIntents.length) {\n        paymentDataRequest.callbackIntents = [].concat(callbackIntents);\n      }\n\n      _this.state.paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {\n        onLoadPaymentData(paymentData);\n      }).catch(function (error) {\n        console.error('GPayButton.paymentsClient.loadPaymentData -> error', error);\n\n        if (error.statusCode === 'CANCELED') {\n          onUserCanceled(paymentDataRequest);\n        }\n      });\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(GPayButton, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (!this.state.paymentsClientInitialised) {\n        this.loadSDK();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      var _state = this.state,\n          isReadyToPay = _state.isReadyToPay,\n          paymentsClientInitialised = _state.paymentsClientInitialised,\n          paymentsClient = _state.paymentsClient;\n\n      if (isReadyToPay || !paymentsClientInitialised) {\n        return;\n      }\n\n      var _props = this.props,\n          apiVersion = _props.apiVersion,\n          apiVersionMinor = _props.apiVersionMinor,\n          allowedPaymentMethods = _props.allowedPaymentMethods;\n      var isReadyToPayRequest = {\n        apiVersion: apiVersion,\n        apiVersionMinor: apiVersionMinor,\n        allowedPaymentMethods: allowedPaymentMethods\n      };\n      paymentsClient.isReadyToPay(isReadyToPayRequest).then(function (response) {\n        var isReadyToPay = response.result;\n\n        if (isReadyToPay) {\n          // * this function is called only to initialise the button styling, the returned button element is NOT used\n          paymentsClient.createButton({\n            onClick: _this2.payButtonClickListener\n          });\n\n          _this2.setState({\n            isReadyToPay: isReadyToPay\n          });\n        }\n      }).catch(function (error) {\n        console.error('window.configureGPay -> error', error);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          className = _props2.className,\n          style = _props2.style,\n          color = _props2.color,\n          type = _props2.type;\n      return React.createElement('div', {\n        className: className,\n        style: style\n      }, this.state.isReadyToPay && React.createElement('button', {\n        onClick: this.payButtonClickListener,\n        type: 'button',\n        'aria-label': 'Google Pay',\n        className: 'gpay-button ' + color + ' ' + type\n      }));\n    }\n  }]);\n  return GPayButton;\n}(PureComponent);\n\nGPayButton.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  development: PropTypes.bool,\n  color: PropTypes.oneOf(['black', 'white']),\n  type: PropTypes.oneOf(['long', 'short']),\n  // * Google Pay API\n  apiVersion: PropTypes.number,\n  apiVersionMinor: PropTypes.number,\n  currencyCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string,\n  totalPriceStatus: PropTypes.string.isRequired,\n  totalPrice: function totalPrice(props, propName, componentName) {\n    if (props.totalPriceStatus !== 'NOT_CURRENTLY_KNOWN') {\n      if (props[propName] === undefined || props[propName] === '') {\n        return new Error(componentName + ': the prop totalPrice is required unless the prop totalPriceStatus is set to NOT_CURRENTLY_KNOWN');\n      } else if (!/^[0-9]+(\\.[0-9][0-9])?$/.exec(props[propName])) {\n        return new Error(componentName + ': the prop totalPrice should be either in a number format or a string of numbers. Should match ^[0-9]+(\\\\.[0-9][0-9])?$');\n      }\n    }\n  },\n  displayItems: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(['LINE_ITEM', 'SUBTOTAL']).isRequired,\n    price: PropTypes.string.isRequired,\n    status: PropTypes.oneOf(['FINAL', 'PENDING'])\n  })),\n  totalPriceLabel: PropTypes.string,\n  checkoutOption: PropTypes.string,\n  merchantInfo: function merchantInfo(props, propName, componentName) {\n    if (props.development === false && (props[propName].merchantId === undefined || props[propName].merchantId === '')) {\n      return new Error(componentName + ': merchantInfo -> merchantId is required in production environment!');\n    } else {\n      var merchantInfoProps = props[propName]; // merchantName, merchantOrigin\n\n      for (var prop in merchantInfoProps) {\n        if (typeof merchantInfoProps[prop] !== 'string') {\n          return new Error(componentName + ': merchantInfo -> ' + prop + ' should be a string!');\n        }\n      }\n    }\n  },\n  allowedPaymentMethods: PropTypes.arrayOf(PropTypes.shape({\n    type: PropTypes.oneOf(['CARD', 'PAYPAL']),\n    parameters: PropTypes.oneOfType([PropTypes.shape({\n      allowedAuthMethods: PropTypes.arrayOf(PropTypes.oneOf(['PAN_ONLY', 'CRYPTOGRAM_3DS'])),\n      allowedCardNetworks: PropTypes.arrayOf(PropTypes.oneOf(['AMEX', 'DISCOVER', 'INTERAC', 'JCB', 'MASTERCARD', 'VISA']))\n    }), PropTypes.shape({\n      purchase_context: PropTypes.shape({\n        purchase_units: PropTypes.array\n      })\n    })]),\n    tokenizationSpecification: PropTypes.shape({\n      type: PropTypes.oneOf(['PAYMENT_GATEWAY', 'DIRECT']),\n      parameters: PropTypes.oneOfType([PropTypes.shape({\n        gateway: PropTypes.string,\n        gatewayMerchantId: PropTypes.string\n      }), PropTypes.shape({\n        protocolVersion: PropTypes.string,\n        publicKey: PropTypes.string\n      })])\n    })\n  })),\n  onLoadPaymentData: PropTypes.func,\n  onPaymentAuthorized: PropTypes.func,\n  onPaymentDataChanged: PropTypes.func,\n  onUserCanceled: PropTypes.func\n};\nGPayButton.defaultProps = {\n  style: {},\n  development: false,\n  color: 'black',\n  type: 'long',\n  apiVersion: 2,\n  apiVersionMinor: 0,\n  allowedPaymentMethods: [{\n    type: 'CARD',\n    parameters: {\n      allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n      allowedCardNetworks: ['AMEX', 'DISCOVER', 'INTERAC', 'JCB', 'MASTERCARD', 'VISA']\n    },\n    tokenizationSpecification: {\n      type: 'PAYMENT_GATEWAY',\n      parameters: {\n        gateway: 'example',\n        gatewayMerchantId: 'exampleGatewayMerchantId'\n      }\n    }\n  }],\n  onLoadPaymentData: function onLoadPaymentData(paymentData) {\n    console.warn('GPayButton: Provide an onLoadPaymentData function to capture this paymentData', paymentData);\n  },\n  onPaymentAuthorized: function onPaymentAuthorized(paymentData) {\n    console.warn('GPayButton: Provide an onPaymentAuthorized function to capture this paymentData', paymentData);\n  },\n  onUserCanceled: function onUserCanceled(paymentDataRequest) {\n    console.warn('GPayButton: User has cancelled the transaction -> paymentDataRequest ', paymentDataRequest);\n  }\n};\nexport default GPayButton;","map":{"version":3,"sources":["../src/index.js"],"names":["GOOGLE_PAY_BUTTON_SDK_URL","GPayButton","PureComponent","propTypes","PropTypes","props","componentName","merchantInfoProps","array","string","func","defaultProps","state","undefined","loadSDK","script","document","setPaymentsClient","development","onPaymentAuthorized","onPaymentDataChanged","options","window","payButtonClickListener","currencyCode","countryCode","totalPriceStatus","totalPrice","displayItems","totalPriceLabel","checkoutOption","merchantInfo","apiVersion","apiVersionMinor","allowedPaymentMethods","onLoadPaymentData","onUserCanceled","paymentDataRequest","callbackIntents","error","isReadyToPay","paymentsClientInitialised","paymentsClient","isReadyToPayRequest","response","onClick","className","style","color","type"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable padded-blocks */\n/* eslint-disable no-multiple-empty-lines */\nimport React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GOOGLE_PAY_BUTTON_SDK_URL = 'https://pay.google.com/gp/p/js/pay.js'\n\nexport default class GPayButton extends PureComponent {\n  static propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    development: PropTypes.bool,\n    color: PropTypes.oneOf(['black', 'white']),\n    type: PropTypes.oneOf(['long', 'short']),\n    // * Google Pay API\n    apiVersion: PropTypes.number,\n    apiVersionMinor: PropTypes.number,\n    currencyCode: PropTypes.string.isRequired,\n    countryCode: PropTypes.string,\n    totalPriceStatus: PropTypes.string.isRequired,\n    totalPrice: (props, propName, componentName) => {\n      if (props.totalPriceStatus !== 'NOT_CURRENTLY_KNOWN') {\n        if (props[propName] === undefined || props[propName] === '') {\n          return new Error(`${componentName}: the prop totalPrice is required unless the prop totalPriceStatus is set to NOT_CURRENTLY_KNOWN`)\n        } else if (!/^[0-9]+(\\.[0-9][0-9])?$/.exec(props[propName])) {\n          return new Error(`${componentName}: the prop totalPrice should be either in a number format or a string of numbers. Should match ^[0-9]+(\\\\.[0-9][0-9])?$`)\n        }\n      }\n    },\n    displayItems: PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      type: PropTypes.oneOf(['LINE_ITEM', 'SUBTOTAL']).isRequired,\n      price: PropTypes.string.isRequired,\n      status: PropTypes.oneOf(['FINAL', 'PENDING'])\n    })),\n    totalPriceLabel: PropTypes.string,\n    checkoutOption: PropTypes.string,\n    merchantInfo: function (props, propName, componentName) {\n      if (props.development === false && (props[propName].merchantId === undefined || props[propName].merchantId === '')) {\n        return new Error(`${componentName}: merchantInfo -> merchantId is required in production environment!`)\n      } else {\n        const merchantInfoProps = props[propName]\n        // merchantName, merchantOrigin\n        for (let prop in merchantInfoProps) {\n          if (typeof merchantInfoProps[prop] !== 'string') {\n            return new Error(`${componentName}: merchantInfo -> ${prop} should be a string!`)\n          }\n        }\n      }\n    },\n    allowedPaymentMethods: PropTypes.arrayOf(\n      PropTypes.shape({\n        type: PropTypes.oneOf(['CARD', 'PAYPAL']),\n        parameters: PropTypes.oneOfType([\n          PropTypes.shape({\n            allowedAuthMethods: PropTypes.arrayOf(PropTypes.oneOf(['PAN_ONLY', 'CRYPTOGRAM_3DS'])),\n            allowedCardNetworks: PropTypes.arrayOf(PropTypes.oneOf(['AMEX', 'DISCOVER', 'INTERAC', 'JCB', 'MASTERCARD', 'VISA']))\n          }),\n          PropTypes.shape({\n            purchase_context: PropTypes.shape({\n              purchase_units: PropTypes.array\n            })\n          })\n        ]),\n        tokenizationSpecification: PropTypes.shape({\n          type: PropTypes.oneOf(['PAYMENT_GATEWAY', 'DIRECT']),\n          parameters: PropTypes.oneOfType([\n            PropTypes.shape({\n              gateway: PropTypes.string,\n              gatewayMerchantId: PropTypes.string\n            }),\n            PropTypes.shape({\n              protocolVersion: PropTypes.string,\n              publicKey: PropTypes.string\n            })\n          ])\n        })\n      })\n    ),\n    onLoadPaymentData: PropTypes.func,\n    onPaymentAuthorized: PropTypes.func,\n    onPaymentDataChanged: PropTypes.func,\n    onUserCanceled: PropTypes.func\n  }\n\n  static defaultProps = {\n    style: {},\n    development: false,\n    color: 'black',\n    type: 'long',\n    apiVersion: 2,\n    apiVersionMinor: 0,\n    allowedPaymentMethods: [\n      {\n        type: 'CARD',\n        parameters: {\n          allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n          allowedCardNetworks: ['AMEX', 'DISCOVER', 'INTERAC', 'JCB', 'MASTERCARD', 'VISA']\n        },\n        tokenizationSpecification: {\n          type: 'PAYMENT_GATEWAY',\n          parameters: {\n            gateway: 'example',\n            gatewayMerchantId: 'exampleGatewayMerchantId'\n          }\n        }\n      }\n    ],\n    onLoadPaymentData: paymentData => {\n      console.warn('GPayButton: Provide an onLoadPaymentData function to capture this paymentData', paymentData)\n    },\n    onPaymentAuthorized: paymentData => {\n      console.warn('GPayButton: Provide an onPaymentAuthorized function to capture this paymentData', paymentData)\n    },\n    onUserCanceled: paymentDataRequest => {\n      console.warn(`GPayButton: User has cancelled the transaction -> paymentDataRequest `, paymentDataRequest)\n    }\n  }\n\n  state = {\n    paymentsClientInitialised: false,\n    paymentsClient: undefined\n  }\n\n  componentDidMount() {\n    if (!this.state.paymentsClientInitialised) {\n      this.loadSDK()\n    }\n  }\n\n  loadSDK = () => {\n    const script = document.createElement('script')\n    script.src = GOOGLE_PAY_BUTTON_SDK_URL\n    script.onload = this.setPaymentsClient\n    script.async = true\n    script.defer = true\n    document.body.appendChild(script)\n  }\n\n  setPaymentsClient = () => {\n    const {\n      development,\n      onPaymentAuthorized,\n      onPaymentDataChanged\n    } = this.props\n\n    let options = {\n      environment: development ? 'TEST' : 'PRODUCTION'\n    }\n    if (typeof onPaymentAuthorized === 'function') {\n      options = {\n        ...options,\n        paymentDataCallbacks: {\n          onPaymentAuthorized\n        }\n      }\n    }\n    if (typeof onPaymentDataChanged === 'function') {\n      options = {\n        ...options,\n        paymentDataCallbacks: {\n          ...options.paymentDataCallbacks,\n          onPaymentDataChanged\n        }\n      }\n    }\n\n    this.setState({\n      paymentsClientInitialised: true,\n      paymentsClient: new window.google.payments.api.PaymentsClient(options)\n    })\n  }\n\n  payButtonClickListener = () => {\n    const {\n      currencyCode,\n      countryCode,\n      totalPriceStatus,\n      totalPrice,\n      displayItems,\n      totalPriceLabel,\n      checkoutOption,\n      merchantInfo,\n      apiVersion,\n      apiVersionMinor,\n      allowedPaymentMethods,\n      onLoadPaymentData,\n      onPaymentAuthorized,\n      onPaymentDataChanged,\n      onUserCanceled\n    } = this.props\n\n    const paymentDataRequest = {\n      apiVersion,\n      apiVersionMinor,\n      allowedPaymentMethods,\n      transactionInfo: {\n        currencyCode,\n        countryCode,\n        totalPriceStatus,\n        totalPrice,\n        displayItems,\n        totalPriceLabel,\n        checkoutOption\n      },\n      merchantInfo\n    }\n\n    const callbackIntents = []\n    if (typeof onPaymentAuthorized === 'function') {\n      callbackIntents.push('PAYMENT_AUTHORIZATION')\n    }\n    if (typeof onPaymentDataChanged === 'function') {\n      callbackIntents.push('SHIPPING_ADDRESS', 'SHIPPING_OPTION')\n    }\n    if (callbackIntents.length) {\n      paymentDataRequest.callbackIntents = [...callbackIntents]\n    }\n\n    this.state.paymentsClient.loadPaymentData(paymentDataRequest).then(function(paymentData) {\n      onLoadPaymentData(paymentData)\n\n    }).catch(function(error) {\n      console.error('GPayButton.paymentsClient.loadPaymentData -> error', error)\n      if (error.statusCode === 'CANCELED') {\n        onUserCanceled(paymentDataRequest)\n      }\n\n    })\n  }\n\n  componentDidUpdate() {\n    const {\n      isReadyToPay,\n      paymentsClientInitialised,\n      paymentsClient\n    } = this.state\n\n    if (isReadyToPay || !paymentsClientInitialised) {\n      return\n    }\n\n    const {\n      apiVersion,\n      apiVersionMinor,\n      allowedPaymentMethods\n    } = this.props\n\n    const isReadyToPayRequest = {\n      apiVersion,\n      apiVersionMinor,\n      allowedPaymentMethods\n    }\n\n    paymentsClient.isReadyToPay(isReadyToPayRequest)\n      .then(response => {\n        const isReadyToPay = response.result\n        if (isReadyToPay) {\n          // * this function is called only to initialise the button styling, the returned button element is NOT used\n          paymentsClient.createButton({onClick: this.payButtonClickListener})\n          this.setState({ isReadyToPay })\n        }\n\n      })\n      .catch(error => {\n        console.error('window.configureGPay -> error', error)\n\n      })\n  }\n\n  render() {\n    const {\n      className,\n      style,\n      color,\n      type\n    } = this.props\n\n    return (\n      <div className={className} style={style}>\n        { this.state.isReadyToPay &&\n          <button\n            onClick={this.payButtonClickListener}\n            type='button'\n            aria-label='Google Pay'\n            className={`gpay-button ${color} ${type}`}\n          />\n        }\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}