{"ast":null,"code":"import { useReducer, useCallback } from 'react';\n\nconst formValidation = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n\n        if (inputId === action.inputId) formIsValid = formIsValid && action.isValid;else formIsValid = formIsValid && state.inputs[inputId].isValid;\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    case 'SET_DATA':\n      return {\n        inputs: action.input,\n        isValid: action.isValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputValues, initialFormValidation) => {\n  const [formstate, dispatch] = useReducer(formValidation, {\n    inputs: initialInputValues,\n    isValid: initialFormValidation\n  });\n  const InputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      inputId: id,\n      isValid: isValid\n    });\n  }, []);\n  const setData = useCallback((inputs, valid) => {\n    dispatch({\n      type: 'SET_DATA',\n      input: inputs,\n      isValid: valid\n    });\n  }, []);\n  return [formstate, InputHandler, setData];\n};","map":{"version":3,"sources":["D:/JAI_PUBG/FRONT-END/pubg_tournment/src/Hook/Form-hook.js"],"names":["useReducer","useCallback","formValidation","state","action","type","formIsValid","inputId","inputs","isValid","value","input","useForm","initialInputValues","initialFormValidation","formstate","dispatch","InputHandler","id","setData","valid"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,WAAnB,QAAqC,OAArC;;AAEA,MAAMC,cAAc,GAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACjC,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,cAAL;AACI,UAAIC,WAAW,GAAC,IAAhB;;AACA,WAAI,MAAMC,OAAV,IAAqBJ,KAAK,CAACK,MAA3B,EAAkC;AAC9B,YAAG,CAACL,KAAK,CAACK,MAAN,CAAaD,OAAb,CAAJ,EAA0B;AACtB;AACH;;AACD,YAAGA,OAAO,KAAGH,MAAM,CAACG,OAApB,EACAD,WAAW,GAACA,WAAW,IAAIF,MAAM,CAACK,OAAlC,CADA,KAGAH,WAAW,GAACA,WAAW,IAAIH,KAAK,CAACK,MAAN,CAAaD,OAAb,EAAsBE,OAAjD;AACH;;AAED,aAAM,EACF,GAAGN,KADD;AAEFK,QAAAA,MAAM,EAAC,EACH,GAAGL,KAAK,CAACK,MADN;AAEH,WAACJ,MAAM,CAACG,OAAR,GAAiB;AAACG,YAAAA,KAAK,EAACN,MAAM,CAACM,KAAd;AAAqBD,YAAAA,OAAO,EAACL,MAAM,CAACK;AAApC;AAFd,SAFL;AAMFA,QAAAA,OAAO,EAACH;AANN,OAAN;;AAQL,SAAK,UAAL;AAAgB,aAAM;AAClBE,QAAAA,MAAM,EAACJ,MAAM,CAACO,KADI;AAElBF,QAAAA,OAAO,EAACL,MAAM,CAACK;AAFG,OAAN;;AAKf;AAAS,aAAON,KAAP;AA1BV;AA4BH,CA7BD;;AA+BA,OAAO,MAAMS,OAAO,GAAC,CAACC,kBAAD,EAAoBC,qBAApB,KAA4C;AAE7D,QAAM,CAACC,SAAD,EAAWC,QAAX,IAAqBhB,UAAU,CAACE,cAAD,EAAgB;AACjDM,IAAAA,MAAM,EAACK,kBAD0C;AAEjDJ,IAAAA,OAAO,EAACK;AAFyC,GAAhB,CAArC;AAKA,QAAMG,YAAY,GAAChB,WAAW,CAAC,CAACiB,EAAD,EAAIR,KAAJ,EAAUD,OAAV,KAAoB;AAC/CO,IAAAA,QAAQ,CAAC;AAACX,MAAAA,IAAI,EAAC,cAAN;AAAsBK,MAAAA,KAAK,EAACA,KAA5B;AAAkCH,MAAAA,OAAO,EAACW,EAA1C;AAA6CT,MAAAA,OAAO,EAACA;AAArD,KAAD,CAAR;AACP,GAFiC,EAEhC,EAFgC,CAA9B;AAIA,QAAMU,OAAO,GAAClB,WAAW,CAAC,CAACO,MAAD,EAAQY,KAAR,KAAgB;AACtCJ,IAAAA,QAAQ,CAAC;AAACX,MAAAA,IAAI,EAAC,UAAN;AAAkBM,MAAAA,KAAK,EAACH,MAAxB;AAAgCC,MAAAA,OAAO,EAACW;AAAxC,KAAD,CAAR;AACH,GAFwB,EAEvB,EAFuB,CAAzB;AAIJ,SAAO,CAACL,SAAD,EAAWE,YAAX,EAAwBE,OAAxB,CAAP;AAEC,CAjBM","sourcesContent":["import {useReducer,useCallback} from 'react';\r\n\r\nconst formValidation=(state,action)=>{\r\n    switch(action.type){\r\n     case 'INPUT_CHANGE':\r\n         let formIsValid=true;\r\n         for(const inputId in state.inputs){\r\n             if(!state.inputs[inputId]){\r\n                 continue\r\n             }\r\n             if(inputId===action.inputId)\r\n             formIsValid=formIsValid && action.isValid;\r\n             else \r\n             formIsValid=formIsValid && state.inputs[inputId].isValid\r\n         }\r\n\r\n         return{\r\n             ...state,\r\n             inputs:{\r\n                 ...state.inputs,\r\n                 [action.inputId]:{value:action.value, isValid:action.isValid}\r\n             },\r\n             isValid:formIsValid\r\n         }; \r\n    case 'SET_DATA':return{\r\n        inputs:action.input,\r\n        isValid:action.isValid\r\n    } \r\n     \r\n     default: return state;\r\n    }\r\n} \r\n\r\nexport const useForm=(initialInputValues,initialFormValidation)=>{\r\n\r\n    const [formstate,dispatch]=useReducer(formValidation,{\r\n        inputs:initialInputValues,\r\n        isValid:initialFormValidation\r\n    });\r\n\r\n    const InputHandler=useCallback((id,value,isValid)=>{\r\n        dispatch({type:'INPUT_CHANGE', value:value,inputId:id,isValid:isValid})\r\n},[]);\r\n\r\n    const setData=useCallback((inputs,valid)=>{\r\n        dispatch({type:'SET_DATA', input:inputs, isValid:valid})\r\n    },[]) ;\r\n\r\nreturn [formstate,InputHandler,setData];\r\n\r\n}"]},"metadata":{},"sourceType":"module"}